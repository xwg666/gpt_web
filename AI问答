import hashlib
import json
import time
from http import HTTPStatus

import dashscope
import pyperclip
import requests
import streamlit as st
import openai
import flask
from dashscope import Generation


def gpt(question):
    # userip = str(request.headers.get('X-Forwarded-For') or request.remote_addr)
    messages = [{'role': 'user', "content": question}]
    openai.api_key = 'xxxxxx'
    try:
        rsp = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-0613",
            messages=messages,  # 只带入一次的问话，不做上下文
            temperature=0.95,
            top_p=0.75,
            max_tokens=2048,
            stream=True
        )
    except:
        print('连接OPENAI失败')
    def get_text():
        final_text = ''
        for info in rsp:
            if info['choices'][0]['finish_reason'] != 'stop':
                final_text += info['choices'][0]['delta']['content']
                # print(final_text)
            else:
                final_text = final_text.replace('"', "").replace("'",'’')
            yield " %s\n\n" % final_text
        print('【问题】：',question,'\n','【答案】：',final_text)
    return flask.Response(get_text(), mimetype='text/event-stream')

def calculate_md5(input_string):
    md5 = hashlib.md5()
    md5.update(input_string.encode('utf-8'))
    encrypted = md5.hexdigest()
    return encrypted
def baichaung(question):
    # question=request.args.get("question")
    # userid=request.args.get("userid")
    url = "https://api.baichuan-ai.com/v1/stream/chat"
    api_key = 'xxxxxxx'
    secret_key = 'xxxxxxxxx'
    messages=[{"role": "user","content": question}]
    data = {
        "model": "Baichuan2-53B",
        "messages": messages
    }

    json_data = json.dumps(data)
    time_stamp = int(time.time())
    signature = calculate_md5(secret_key + json_data + str(time_stamp))

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + api_key,
        "X-BC-Request-Id": "your requestId",
        "X-BC-Timestamp": str(time_stamp),
        "X-BC-Signature": signature,
        "X-BC-Sign-Algo": "MD5",
    }

    def data():
        answer = ''
        response = requests.post(url, data=json_data, headers=headers,stream=True)

        for line in response.iter_lines():
            content=line.decode('utf-8')
            content=json.loads(content)
            message=content['data']['messages'][0]['content']
            # stop=content['data']['messages'][0]['finish_reason']
            answer=answer+message
            yield answer
        print('【问题】：',question,'\n','【答案】：',answer)
    return flask.Response(data(), mimetype="text/event-stream; charset=utf-8")


def qianwen(question):
    dashscope.api_key = "xxxxxxxxxxxx"
    def data():
        full_content = ''
        messages = [
            {'role': 'user', 'content': question}]
        responses = Generation.call(
            Generation.Models.qwen_turbo,
            messages=messages,
            result_format='message',  # set the result to be "message" format.
            stream=True,
            incremental_output=True  # get streaming output incrementally
        )
         # with incrementally we need to merge output.
        for response in responses:
            if response.status_code == HTTPStatus.OK:
                full_content += response.output.choices[0]['message']['content']
                yield full_content

            else:
                print('Request id: %s, Status code: %s, error code: %s, error message: %s' % (
                    response.request_id, response.status_code,
                    response.code, response.message
                    ))

        print('【问题】：',question,'\n','【答案】：',full_content)
    return flask.Response(data(), mimetype="text/event-stream; charset=utf-8")


def main():
    # 设置页面标题
    st.title("AI问答")
    #单选框
    select = st.selectbox("选择模型", ["ChatGPT3.5", "百川", "通义千问"])
    # 添加文本内容
    cols=st.columns(2)
    cols[1].write("")
    cols[1].write("")
    answer=''
    try:
        response=''
        # 添加用户输入框
        question=cols[0].text_input("输入问题",key='input')
        # 添加按钮并处理点击事件
        if cols[1].button("提交"):
            output=st.empty()  #创建空容器
            if 'ChatGPT3.5' in select:
                response=gpt(question)
            if '百川' in select:
                response=baichaung(question)
            if '通义千问' in select:
                response=qianwen(question)
            # response=gpt(question)
            with st.spinner('正在对话中...'):
                if response.status_code==200:
                    for chunk in response.iter_encoded():
                        str_chunk=chunk.decode('utf-8')
                        output.markdown(str_chunk)

                        # output.text_area("ChatGPT回答：",height=len(str_chunk),value=str_chunk)
                        # answer=chunk.decode('utf-8')

    except:
        st.text('回答结束')

if __name__ == '__main__':
    main()
    # copy(result)
